function getInputStr()  {    var myWindow = new Window ("dialog", "Rename Selected Items");     var myInputGroup = myWindow.add ("group");    myInputGroup.add ("statictext", undefined, "Base Name:");    var myText = myInputGroup.add ("edittext", undefined, "4/4 2/4 3/2");    myText.characters = 20;    myText.active = true;    var myButtonGroup = myWindow.add ("group");    myButtonGroup.alignment = "right"; myButtonGroup.add ("button", undefined, "OK"); myButtonGroup.add ("button", undefined, "Cancel");    if (myWindow.show () == 1){        return myText.text;    } else {        return 0;    }}function getPropotions(strArr){        var beats = Array(strArr.length);        var ratios = Array(strArr.length);        var count = 0;        for(var i = 0; i < strArr.length; i++)        {                beats[i] = eval(strArr[i]);                count += beats[i];        }        for(var i = 0; i < strArr.length; i++)        {                ratios[i] = beats[i] / count;        }            return ratios; }function getBounds(x, sel){       x.depth++;    $.writeln('depth '+x.depth+' name: '+sel.name+' type '+sel.typename);    if(sel.typename == 'GroupItem' )    {        var items = sel.pageItems;                $.writeln('n '+items.length);        for( var i = 0; i < items.length; i++ )        {            var it = items[i];                        $.writeln('----- item: typename name '+it.typename+' '+it.name);            if(it.typename == 'GroupItem')            {                if(it.name == 'staff')                {                    x.staffFound = true;                    x.x1 = it.controlBounds[0];                    x.x2 = it.controlBounds[2];                    $.writeln('found!');                    return 1;                }                else                {                    if( getBounds(x, it) ) return;                    $.writeln('not found');                    x.depth--;                }                               }            else if(it.name == 'staff')            {                if(it.typename == 'PathItem')                {                    $.writeln('path');                    return 1;                }            }        }        return 0;        /*            var paths = selected[0].pathItems;            if(paths.length > 0)            {                var pts;                for(var i = 0; i < paths.length; i++)                {                        pts = paths[i].pathPoints;                        for(var j = 0; j < pts.length; j++)                        {                            if(i == 0 && j == 0)                            {                                x1 = pts[j].anchor[0];                                y1 = pts[j].anchor[1];                                x2 = x1;                                y2 = y1;                            } else {                                x1 = (pts[j].anchor[0] < x1) ? pts[j].anchor[0] : x1 ;                                y1 = (pts[j].anchor[1] > y1) ? pts[j].anchor[1] : y1 ;                                x2 = (pts[j].anchor[0] > x2) ? pts[j].anchor[0] : x2 ;                                y2 = (pts[j].anchor[1] < y2) ? pts[j].anchor[1] : y2 ;                            }                        }                }              return [x1,y1,x2,y2];            }            return 0;*/    }              }function makeMeasures(group, measures, ratios, bounds){    var x = bounds[0];    var y1 = bounds[1];    var length = bounds[2] - bounds[0];    var y2 = bounds[3];        for(var i = 0; i < measures.length; i++)    {        var meterStr = measures[i].split('/');        var meter = doc.textFrames.add();        meter.contents = meterStr[0] + '\n' + meterStr[1];        meter.stroked = false;        meter.fillColor = 'black';        meter.name = 'meter';        meter.position = [x, y1+meter.height];        meter.textRange.justification = Justification.CENTER;        x += ratios[i] * length;                var barline = doc.pathItems.add();        barline.stroked = true;        barline.setEntirePath([[x, y1], [x, y2]]);        barline.name = "barline";    } }function StaffBounds(){    this.x1 = null;    this.y1 = null;    this.x2 = null;    this.y2 = null;    this.staff = false;    this.depth = 0;}function  main(){    if ( app.documents.length > 0 ) {        doc = app.activeDocument;        //~     if(!doc.saved){//~        Window.alert("This script needs to modify your document. Please save it before running this script.");//~     } else {        var measureStr = getInputStr(doc);        if(!measureStr)            return 0;                    var measures = measureStr.split(" ");                if(measures.length > 0)        {               var ratios = getPropotions(measures);            var selected = doc.selection;            if(selected.length == 0 || selected.length > 1)            {                Window.alert("please select stave or stave group to divide into measures");                $.writeln(selected.length);                return 0;            }                        var sel = selected[0];                        var bounds = new StaffBounds();            getBounds(bounds, sel);                        if(!bounds.staff)                return;                        makeMeasures(sel, measures, ratios, bounds);        } else {            Window.alert("no measures to write");        }//~     }    }else{        Window.alert("You must open at least one document.");    }  }main();